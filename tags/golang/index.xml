<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>golang on 钰的笔记屋</title><link>https://xyslion.github.io/tags/golang/</link><description>Recent content in golang on 钰的笔记屋</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><managingEditor>xiaoyulion@gmail.com (钰)</managingEditor><webMaster>xiaoyulion@gmail.com (钰)</webMaster><lastBuildDate>Fri, 11 Oct 2019 10:17:58 +0800</lastBuildDate><atom:link href="https://xyslion.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>Golang里定义goroutine池控制最大goroutine数量</title><link>https://xyslion.github.io/notes/goroutine_pool/</link><pubDate>Fri, 11 Oct 2019 10:17:58 +0800</pubDate><author>xiaoyulion@gmail.com (钰)</author><guid>https://xyslion.github.io/notes/goroutine_pool/</guid><description>在golang里时常使用goroutine来进行异步任务， 但是goroutine虽然使用的资源比线程少多了，单个goroutine大约消耗4</description></item><item><title>golang的gc算法理解</title><link>https://xyslion.github.io/notes/golang_gc/</link><pubDate>Tue, 08 Oct 2019 15:57:56 +0800</pubDate><author>xiaoyulion@gmail.com (钰)</author><guid>https://xyslion.github.io/notes/golang_gc/</guid><description>golang的gc算法理解 经典的gc算法有： 引用计数(reference counting), 标记-清除(mark-sweep), 复制收集(copy and collection). Gola</description></item></channel></rss>